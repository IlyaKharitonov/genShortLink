// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.17.3
// source: genlink.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GenLinkClient is the client API for GenLink service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GenLinkClient interface {
	Create(ctx context.Context, in *URL, opts ...grpc.CallOption) (*ShortURL, error)
	Get(ctx context.Context, in *ShortURL, opts ...grpc.CallOption) (*URL, error)
}

type genLinkClient struct {
	cc grpc.ClientConnInterface
}

func NewGenLinkClient(cc grpc.ClientConnInterface) GenLinkClient {
	return &genLinkClient{cc}
}

func (c *genLinkClient) Create(ctx context.Context, in *URL, opts ...grpc.CallOption) (*ShortURL, error) {
	out := new(ShortURL)
	err := c.cc.Invoke(ctx, "/proto.genLink/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genLinkClient) Get(ctx context.Context, in *ShortURL, opts ...grpc.CallOption) (*URL, error) {
	out := new(URL)
	err := c.cc.Invoke(ctx, "/proto.genLink/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenLinkServer is the server API for GenLink service.
// All implementations must embed UnimplementedGenLinkServer
// for forward compatibility
type GenLinkServer interface {
	Create(context.Context, *URL) (*ShortURL, error)
	Get(context.Context, *ShortURL) (*URL, error)
	//mustEmbedUnimplementedGenLinkServer()
}

// UnimplementedGenLinkServer must be embedded to have forward compatible implementations.
type UnimplementedGenLinkServer struct {
}

func (UnimplementedGenLinkServer) Create(context.Context, *URL) (*ShortURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGenLinkServer) Get(context.Context, *ShortURL) (*URL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGenLinkServer) mustEmbedUnimplementedGenLinkServer() {}

// UnsafeGenLinkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GenLinkServer will
// result in compilation errors.
type UnsafeGenLinkServer interface {
	mustEmbedUnimplementedGenLinkServer()
}

func RegisterGenLinkServer(s grpc.ServiceRegistrar, srv GenLinkServer) {
	s.RegisterService(&GenLink_ServiceDesc, srv)
}

func _GenLink_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(URL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenLinkServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.genLink/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenLinkServer).Create(ctx, req.(*URL))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenLink_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortURL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenLinkServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.genLink/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenLinkServer).Get(ctx, req.(*ShortURL))
	}
	return interceptor(ctx, in, info, handler)
}

// GenLink_ServiceDesc is the grpc.ServiceDesc for GenLink service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GenLink_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.genLink",
	HandlerType: (*GenLinkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _GenLink_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _GenLink_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "genlink.proto",
}
